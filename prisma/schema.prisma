// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String?        @unique
  password      String?
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  Subscription  Subscription[]
  Note          Note[]         @relation("user_notes")
  Customer      Customer[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Subscription model represents user subscriptions
model Subscription {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  planId      Int      @map("plan_id")
  createdAt   DateTime @default(now())
  expiry_date DateTime
  noteLimit   Int      @map("note_limit")
  // Define a foreign key relationship to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Customer {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String  @map("stripe_customer_id")
  email            String? @unique

  @@map("customers")
}

// Note model represents user-created notes
model Note {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Define a foreign key relationship to User
  user      User     @relation("user_notes", fields: [userId], references: [id])

  @@map("notes")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

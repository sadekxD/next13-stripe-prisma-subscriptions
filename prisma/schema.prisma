// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String?        @unique
  password       String?
  emailVerified  DateTime?      @map("email_verified")
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  billingAddress Json?
  payment_method Json?
  accounts       Account[]
  sessions       Session[]
  Subscription   Subscription[]
  Note           Note[]         @relation("user_notes")
  Customer       Customer[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product {
  id          String  @id
  active      Boolean @default(true)
  name        String? @db.Text
  description String?
  image       String? @db.Text
  metadata    Json?
  Price       Price[]

  @@map("products")
}

model Price {
  id              String              @id
  productId       String              @map("product_id")
  active          Boolean             @default(true)
  description     String?
  unitAmount      Int                 @map("unit_amount")
  currency        String?
  pricingType     PricingType         @default(recurring) @map("pricing_type")
  interval        PricingPlanInterval
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json?

  Product      Product        @relation(fields: [productId], references: [id])
  Subscription Subscription[]

  @@map("prices")
}

// Subscription model represents user subscriptions
model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @map("user_id")
  status             SubscriptionStatus
  priceId            String             @map("price_id")
  quantity           Int
  createdAt          DateTime           @default(now()) @map("created_at")
  currentPeriodStart DateTime           @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime           @default(now()) @map("current_period_end")
  expiredAt          DateTime           @default(now()) @map("expired_at")
  cancelAt           DateTime           @default(now()) @map("cancel_at")
  cancelledAt        DateTime           @default(now()) @map("cancelled_at")
  trialStart         DateTime           @default(now()) @map("trial_start")
  trialEnd           DateTime           @default(now()) @map("trial_end")
  noteLimit          Int                @map("note_limit")

  metadata Json?

  // Define foreign keys relationship to User and Price
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  price Price @relation(fields: [priceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Customer {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String  @map("stripe_customer_id")
  email            String? @unique

  @@map("customers")
}

// Note model represents user-created notes
model Note {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Define a foreign key relationship to User
  user      User     @relation("user_notes", fields: [userId], references: [id])

  @@map("notes")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum PricingType {
  one_time
  recurring
}

enum PricingPlanInterval {
  day
  week
  month
  year
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}
